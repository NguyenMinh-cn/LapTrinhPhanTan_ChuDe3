package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import entities.*;
import gui.custom.GiaoDienThongTinChiTietBaiThi;
import gui.custom.NutCauHoi;
import gui.custom.PanelThoiGianThi;
import gui.custom.WrapLayout;
import lombok.SneakyThrows;
import org.kordamp.ikonli.materialdesign.MaterialDesign;
import org.kordamp.ikonli.swing.FontIcon;
import service.BaiThiService;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import static gui.GiaoDienDanhSachBaiThi.baiThiService;

public class GiaoDienLamBaiThi {
    private final CardLayout cardLayout;
    private JPanel panel1;
    private JPanel pnNoiDung;
    private HocSinh hocSinh;
    private BaiThiService baiThiService = (BaiThiService) Naming.lookup("rmi://localhost:8081/baiThiService");
    public static String chuyenDinhDangNgayGio(LocalDateTime localDateTime) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm, dd/MM/yyyy");
            return localDateTime.format(formatter);
        } catch (Exception e) {
            e.printStackTrace();
            return "Định dạng không hợp lệ";
        }
    }
    public GiaoDienLamBaiThi(HocSinh hocSinh) throws MalformedURLException, NotBoundException, RemoteException {
        this.hocSinh = hocSinh;
        $$$setupUI$$$();
        cardLayout = (CardLayout) panel1.getLayout();

//        taoDSBaiThi();
    }
//    public void taoDSBaiThi() throws MalformedURLException, NotBoundException, RemoteException {
//        try {
//            pnNoiDung = new JPanel();
//            pnNoiDung.setBackground(Color.WHITE);
//            // Dùng WrapLayout để tự động xuống dòng và hỗ trợ cuộn
//            pnNoiDung.setLayout(new WrapLayout(FlowLayout.LEFT, 10, 10));
//
//            // Thêm các phần tử vào pnHienThiCacBaiThi
//            List<BaiThi> dsBaiThi = baiThiService.timDSBaiTHiTheoMaGiaoVien(giaoVienDangNhap.getMaGiaoVien());
//
//            if (dsBaiThi.isEmpty()) {
//                // Hiển thị thông báo nếu không có bài thi
//                JLabel lblThongBao = new JLabel("Không có bài thi nào. Hãy tạo bài thi mới!");
//                lblThongBao.setFont(new Font("Arial", Font.BOLD, 18));
//                lblThongBao.setForeground(new Color(100, 100, 100));
//                pnHienThiCacBaiThi.add(lblThongBao);
//            } else {
//                // Hiển thị danh sách bài thi
//                for (BaiThi baiThi : dsBaiThi) {
//                    pnHienThiCacBaiThi.add(thanhPhanBaiThi(baiThi));
//                }
//            }
//
//            // Đưa pnHienThiCacBaiThi vào JScrollPane để cuộn
//            JScrollPane scrollPane = new JScrollPane(pnHienThiCacBaiThi,
//                    JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
//                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
//            scrollPane.setPreferredSize(new Dimension(600, 400));
//            scrollPane.setBorder(BorderFactory.createEmptyBorder()); // Bỏ viền
//
//            // Thêm JScrollPane vào panel chứa nội dung
//            pnNoiDung.removeAll();
//            pnNoiDung.add(scrollPane, BorderLayout.CENTER);
//            pnNoiDung.revalidate();
//            pnNoiDung.repaint();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this,
//                    "Lỗi khi tải danh sách bài thi: " + e.getMessage(),
//                    "Lỗi", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }
//    }
        {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new CardLayout(0, 0));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel1.add(panel2, "Card1");
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(10, 10, 10, 10), -1, -1));
        panel3.setBackground(new Color(-2954497));
        panel3.setPreferredSize(new Dimension(203, 70));
        panel2.add(panel3, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Arial", Font.BOLD, 20, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-16777216));
        label1.setText("Danh sách đề thi");
        panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pnNoiDung = new JPanel();
        pnNoiDung.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(pnNoiDung, BorderLayout.CENTER);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel4, "Card2");
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel5, "Card3");
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
    public JPanel thanhPhanBaiThi(BaiThi baiThi) {
        // Panel chính
        JPanel panel = new JPanel(new BorderLayout());
        panel.setPreferredSize(new Dimension(350, 350)); // Giảm kích thước để gọn hơn
        panel.setMaximumSize(new Dimension(400, 400));
        panel.setMinimumSize(new Dimension(350, 300));
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createCompoundBorder(
                new LineBorder(new Color(200, 200, 200), 1, true),
                new EmptyBorder(10, 15, 10, 15) // Giảm padding
        ));

        // Panel chứa thông tin
        JPanel info = new JPanel();
        info.setLayout(new BoxLayout(info, BoxLayout.Y_AXIS));
        info.setOpaque(false);

        // Font chữ hiện đại
        Font labelFont = new Font("Segoe UI", Font.PLAIN, 20);
        Font boldFont = new Font("Segoe UI", Font.BOLD, 20);

        // Các nhãn thông tin
        JLabel lblTenBaiThi = new JLabel("<html>Tên bài thi: " + baiThi.getTenBaiThi() + "</html>");
        lblTenBaiThi.setFont(boldFont);
        lblTenBaiThi.setForeground(new Color(33, 33, 33));

        JLabel lblMonHoc = new JLabel("<html><b>Môn học: </b> " + baiThi.getMonHoc().getTenMon() + "</html>");
        lblMonHoc.setFont(labelFont);
        lblMonHoc.setForeground(new Color(66, 66, 66));

        JLabel lblBatDau = new JLabel("<html><b>Bắt đầu:</b> " + chuyenDinhDangNgayGio(baiThi.getThoiGianBatDau()) + "</html>");
        lblBatDau.setFont(labelFont);
        lblBatDau.setForeground(new Color(66, 66, 66));

        JLabel lblKetThuc = new JLabel("<html><b>Kết thúc:</b> " + chuyenDinhDangNgayGio(baiThi.getThoiGianKetThuc()) + "</html>");
        lblKetThuc.setFont(labelFont);
        lblKetThuc.setForeground(new Color(66, 66, 66));

        JLabel lblThoiGian = new JLabel("<html><b>Thời gian:</b> " + baiThi.getThoiLuong() + "</html>");
        lblThoiGian.setFont(labelFont);
        lblThoiGian.setForeground(new Color(66, 66, 66));

        JLabel lblSoCauHoi = new JLabel("<html><b>Số câu hỏi:</b> " + baiThi.getDanhSachCauHoi().size() + "</html>");
        lblSoCauHoi.setFont(labelFont);
        lblSoCauHoi.setForeground(new Color(66, 66, 66));

        JLabel lblGiaoVien = new JLabel("<html><b>Giáo viên:</b> " + baiThi.getGiaoVien().getHoTen() + "</html>");
        lblGiaoVien.setFont(labelFont);
        lblGiaoVien.setForeground(new Color(66, 66, 66));

        // Thêm nhãn vào panel thông tin
        info.add(lblTenBaiThi);
        info.add(lblMonHoc);
        info.add(lblBatDau);
        info.add(lblKetThuc);
        info.add(lblThoiGian);
        info.add(lblSoCauHoi);
        info.add(lblGiaoVien);


// Nút "Chỉnh sửa bài thi"
        JButton btnChinhSua = new JButton("Chỉnh sửa");
        btnChinhSua.setPreferredSize(new Dimension(120, 35));
        btnChinhSua.setFont(new Font("Segoe UI", Font.BOLD, 18));
        btnChinhSua.setFocusPainted(false);
        btnChinhSua.setBackground(new Color(76, 175, 80)); // Màu xanh lá
        btnChinhSua.setForeground(Color.WHITE);
        btnChinhSua.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnChinhSua.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));


        JLabel nutXoaBaiThi = new JLabel();
        nutXoaBaiThi.setIcon(FontIcon.of(MaterialDesign.MDI_DELETE, 24, new Color(240, 35, 60)));
        nutXoaBaiThi.setPreferredSize(new Dimension(50, 35));
        nutXoaBaiThi.setBackground(Color.WHITE);
        nutXoaBaiThi.setCursor(new Cursor(Cursor.HAND_CURSOR));
        nutXoaBaiThi.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

        // Panel chứa nút
        JPanel btnPanel = new JPanel();
        btnPanel.setLayout(new BoxLayout(btnPanel, BoxLayout.X_AXIS));
        btnPanel.setOpaque(false);
        btnPanel.add(Box.createHorizontalGlue());
        btnPanel.add(btnChinhSua); // Thêm trước hoặc sau tùy bạn muốn vị trí
        btnPanel.add(Box.createHorizontalGlue());
        btnPanel.add(nutXoaBaiThi);
        // Thêm vào panel chính
        panel.add(info, BorderLayout.CENTER);
        panel.add(btnPanel, BorderLayout.SOUTH);

        return panel;
    }
}
